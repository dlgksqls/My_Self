package hello.my_self.mock;

import hello.my_self.projectstack.domain.ProjectStack;
import hello.my_self.projectstack.repository.ProjectStackRepository;

import java.util.*;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.concurrent.atomic.AtomicLong;

public class FakeProjectStackRepository implements ProjectStackRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<ProjectStack> data = new ArrayList<>();


    @Override
    public ProjectStack save(ProjectStack projectStack) {
        ProjectStack newRelation = ProjectStack.builder()
                .id(autoGeneratedId.incrementAndGet())
                .project(projectStack.getProject())
                .stack(projectStack.getStack())
                .build();

        data.add(newRelation);
        return newRelation;
    }

    public ProjectStack findById(Long id) {
        return data.stream()
                .filter(ps -> ps.getId().equals(id))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("해당 연관관계는 없습니다"));
    }

    @Override
    public List<ProjectStack> findByProjectId(Long projectId) {
        List<ProjectStack> projectStack = data.stream()
                .filter(ps -> Optional.ofNullable(ps.getProject())
                        .map(project -> project.getId())
                        .filter(id -> Objects.equals(id, projectId))
                        .isPresent())
                .toList();

        if (projectStack.isEmpty()) {
            throw new NoSuchElementException("해당 관계를 찾을 수 없습니다");
        }

        return projectStack;
    }

    @Override
    public ProjectStack findByProjectIdAndStackId(Long projectId, Long stackId) {
        ProjectStack projectStack = data.stream().filter
                        (pj -> pj.getProject().getId().equals(projectId)
                                && pj.getStack().getId().equals(stackId))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("해당 관계를 찾을 수 없습니다"));

        return projectStack;
    }

    @Override
    public void delete(Long id) {
        data.removeIf(ps -> ps.getId().equals(id));
    }

    @Override
    public void allDelete(List<ProjectStack> projectStacks) {
        for (ProjectStack projectStack : projectStacks) {
            data.removeIf(ps -> ps.getId().equals(projectStack.getId()));
        }
    }
}
