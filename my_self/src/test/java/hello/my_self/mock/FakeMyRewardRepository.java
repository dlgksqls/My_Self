package hello.my_self.mock;

import hello.my_self.myreward.domain.MyReward;
import hello.my_self.myreward.dto.MyRewardUpdateDto;
import hello.my_self.myreward.repository.MyRewardRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMyRewardRepository implements MyRewardRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<MyReward> data = new ArrayList<>();


    @Override
    public MyReward save(MyReward myReward) {
        MyReward reward = MyReward.builder()
                .id(autoGeneratedId.incrementAndGet())
                .name(myReward.getName())
                .host(myReward.getHost())
                .description(myReward.getDescription())
                .number(myReward.getNumber())
                .member(myReward.getMember())
                .build();

        data.add(reward);
        return reward;
    }

    @Override
    public MyReward findById(Long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("해당 상은 없습니다."));
    }

    @Override
    public MyReward findByName(String name) {
        return data.stream()
                .filter(item -> item.getName().equals(name))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("해당 상은 없습니다."));
    }

    @Override
    public MyReward update(String name, MyRewardUpdateDto myRewardUpdateDto) {
        MyReward findReward = data.stream()
                .filter(item -> item.getName().equals(name))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("해당 상은 없습니다."));

        findReward.update(myRewardUpdateDto);
        return findReward;
    }

    @Override
    public void delete(String name) {
        data.removeIf(item -> item.getName().equals(name));
    }

    @Override
    public List<MyReward> findByMemberId(Long memberId) {
        return data.stream()
                .filter(reward -> reward.getMember().getId().equals(memberId))
                .toList();
    }
}
