package hello.my_self.mock;

import hello.my_self.myproject.domain.MyProject;
import hello.my_self.myproject.dto.ProjectUpdateDto;
import hello.my_self.myproject.repository.MyProjectRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMyProjectRepository implements MyProjectRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<MyProject> data = new ArrayList<>();
    @Override
    public MyProject save(MyProject newProject) {
        MyProject myProject = MyProject.builder()
                .id(autoGeneratedId.incrementAndGet())
                .name(newProject.getName())
                .role(newProject.getRole())
                .description(newProject.getDescription())
                .link(newProject.getLink())
                .member(newProject.getMember())
                .build();
        data.add(myProject);
        return myProject;
    }

    @Override
    public MyProject findByName(String projectName) {
        return data.stream()
                .filter(item -> item.getName().equals(projectName))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("해당 프로젝트는 없습니다."));
    }

    @Override
    public MyProject findById(Long id) {
        return data.stream()
                .filter(item -> item.getId().equals(id))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("해당 프로젝트는 없습니다."));
    }

    @Override
    public MyProject update(Long id, ProjectUpdateDto updateDto) {
        MyProject updateProject = data.stream()
                .filter(item -> item.getId().equals(id))
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("해당 프로젝트는 없습니다."));

        updateProject.update(updateDto);
        return updateProject;
    }

    @Override
    public List<MyProject> findByMemberId(Long memberId) {
        return data.stream()
                .filter(project -> project.getMember().getId().equals(memberId))
                .toList();
    }

    @Override
    public void delete(Long id) {
        data.removeIf(item -> item.getName().equals(id));
    }
}
